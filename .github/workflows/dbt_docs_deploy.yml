name: Deploy dbt Documentation

on:
  repository_dispatch:
    types: [deploy-docs]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: northwind/dbt
  ECS_CLUSTER: northwind-cluster
  ECS_TASK_DEFINITION: northwind-dbt-run

jobs:
  generate-and-deploy-docs:
    name: Generate and Deploy Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Install JQ
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate and Deploy dbt docs to S3
        id: generate-docs
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.event.client_payload.sha }}
        run: |
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Using image: $IMAGE_URI"

          TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query 'taskDefinition')

          # Lógica corrigida, igual à da pipeline principal
          NEW_TASK_DEFINITION_JSON=$(echo $TASK_DEFINITION_JSON | \
            jq --arg IMAGE_URI "$IMAGE_URI" '.containerDefinitions[0].image = $IMAGE_URI' | \
            jq '.containerDefinitions[0].command = ["sh", "-c", "dbt docs generate && aws s3 sync target/ s3://${{ secrets.DBT_DOCS_BUCKET }}/ --delete"]' | \
            jq 'del(.containerDefinitions[0].environment)' | \
            jq 'del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

          NEW_TASK_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION_JSON" --query 'taskDefinition.taskDefinitionArn' --output text)

          TASK_RUN_ARN=$(aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER }} \
            --task-definition $NEW_TASK_ARN \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.PRIVATE_SUBNET_1 }},${{ secrets.PRIVATE_SUBNET_2 }}],securityGroups=[${{ secrets.FARGATE_SECURITY_GROUP }}]}" \
            --query 'tasks[0].taskArn' \
            --output text)

          aws ecs wait tasks-stopped --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_RUN_ARN