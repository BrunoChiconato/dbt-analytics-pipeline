name: DBT Run Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'northwind/**' # Monitora a pasta correta
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: northwind/dbt
  ECS_CLUSTER: northwind-cluster
  ECS_TASK_DEFINITION: northwind-dbt-run

jobs:
  build-and-run:
    name: Build and Run dbt
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug file contents and structure
        run: |
          echo "========================================="
          echo "Listando todos os arquivos no repositÃ³rio:"
          ls -laR
          echo "========================================="
          echo "ConteÃºdo do Dockerfile:"
          cat docker/Dockerfile
          echo "========================================="
          echo "ConteÃºdo da Workflow:"
          cat .github/workflows/dbt_run_workflow.yml
          echo "========================================="

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Helper to run ECS Tasks
        id: ecs-helper
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Run dbt on ECS Fargate
        id: run-dbt
        run: |
          TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query 'taskDefinition')
          NEW_TASK_DEFINITION_JSON=$(echo $TASK_DEFINITION_JSON | \
            jq '.containerDefinitions[0].image = "${{ steps.build-image.outputs.image }}"' | \
            jq '.containerDefinitions[0].command = ["dbt", "run"]' | \
            jq 'del(.containerDefinitions[0].environment)' | \
            jq 'del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          NEW_TASK_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION_JSON" --query 'taskDefinition.taskDefinitionArn' --output text)
          TASK_RUN_ARN=$(aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER }} \
            --task-definition $NEW_TASK_ARN \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.PRIVATE_SUBNET_1 }},${{ secrets.PRIVATE_SUBNET_2 }}],securityGroups=[${{ secrets.FARGATE_SECURITY_GROUP }}]}" \
            --query 'tasks[0].taskArn' \
            --output text)
          echo "task_arn=$TASK_RUN_ARN" >> $GITHUB_OUTPUT
          aws ecs wait tasks-stopped --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_RUN_ARN
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --tasks $TASK_RUN_ARN \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          if [ "$EXIT_CODE" != "0" ]; then
            echo "dbt run failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Run dbt tests
        run: |
          TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query 'taskDefinition')
          NEW_TASK_DEFINITION_JSON=$(echo $TASK_DEFINITION_JSON | \
            jq '.containerDefinitions[0].image = "${{ steps.build-image.outputs.image }}"' | \
            jq '.containerDefinitions[0].command = ["dbt", "test"]' | \
            jq 'del(.containerDefinitions[0].environment)' | \
            jq 'del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          NEW_TASK_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION_JSON" --query 'taskDefinition.taskDefinitionArn' --output text)
          TASK_RUN_ARN=$(aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER }} \
            --task-definition $NEW_TASK_ARN \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.PRIVATE_SUBNET_1 }},${{ secrets.PRIVATE_SUBNET_2 }}],securityGroups=[${{ secrets.FARGATE_SECURITY_GROUP }}]}" \
            --query 'tasks[0].taskArn' \
            --output text)
          aws ecs wait tasks-stopped --cluster ${{ env.ECS_CLUSTER }} --tasks $TASK_RUN_ARN
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --tasks $TASK_RUN_ARN \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)
          if [ "$EXIT_CODE" != "0" ]; then
            echo "dbt test failed with exit code $EXIT_CODE"
            exit 1
          fi

      - name: Upload artifacts to S3
        if: success()
        run: |
          TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query 'taskDefinition')
          NEW_TASK_DEFINITION_JSON=$(echo $TASK_DEFINITION_JSON | \
            jq '.containerDefinitions[0].image = "${{ steps.build-image.outputs.image }}"' | \
            jq '.containerDefinitions[0].command = ["sh", "-c", "dbt compile && aws s3 sync target/ s3://${{ secrets.DBT_ARTIFACTS_BUCKET }}/runs/${{ github.sha }}/"]' | \
            jq 'del(.containerDefinitions[0].environment)' | \
            jq 'del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
          NEW_TASK_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION_JSON" --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER }} \
            --task-definition $NEW_TASK_ARN \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.PRIVATE_SUBNET_1 }},${{ secrets.PRIVATE_SUBNET_2 }}],securityGroups=[${{ secrets.FARGATE_SECURITY_GROUP }}]}"

      - name: Notify success
        if: success()
        run: |
          echo "âœ… dbt run completed successfully!"
          echo "ðŸ“Š View logs in CloudWatch: https://console.aws.amazon.com/cloudwatch/home?region=${{ env.AWS_REGION }}#logsV2:log-groups/log-group/%2Fecs%2Fnorthwind%2Fdbt"

      - name: Trigger docs deployment
        if: success() && github.ref == 'refs/heads/main'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: deploy-docs
          client-payload: '{"sha": "${{ github.sha }}"}'